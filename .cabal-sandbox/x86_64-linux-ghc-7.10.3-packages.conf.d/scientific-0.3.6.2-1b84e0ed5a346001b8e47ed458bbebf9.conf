name: scientific
version: 0.3.6.2
id: scientific-0.3.6.2-1b84e0ed5a346001b8e47ed458bbebf9
key: scien_6FeogsJyNjJGhovcSMLXLb
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    "Data.Scientific" provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    >>> read "1e1000000000" :: Scientific
    1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
trusted: False
import-dirs: /home/matheusms/PF/SegundaAvaliacaoFuncional/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/scientific-0.3.6.2-6FeogsJyNjJGhovcSMLXLb
library-dirs: /home/matheusms/PF/SegundaAvaliacaoFuncional/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/scientific-0.3.6.2-6FeogsJyNjJGhovcSMLXLb
data-dir: /home/matheusms/PF/SegundaAvaliacaoFuncional/.cabal-sandbox/share/x86_64-linux-ghc-7.10.3/scientific-0.3.6.2
hs-libraries: HSscientific-0.3.6.2-6FeogsJyNjJGhovcSMLXLb
depends:
    base-4.8.2.0-0d6d1084fbc041e1cded9228e80e264d
    binary-0.7.5.0-bf6a937522bb8cec5d00218470f28789
    bytestring-0.10.6.0-9a873bcf33d6ce2fd2698ce69e2c1c66
    containers-0.5.6.2-59326c33e30ec8f6afd574cbac625bbb
    deepseq-1.4.1.1-614b63b36dd6e29d2b35afff57c25311
    hashable-1.2.7.0-d4f6b214c81456ba8954a8bda43209bb
    integer-gmp-1.0.0.0-3c8c40657a9870f5c33be17496806d8d
    integer-logarithms-1.0.2.1-c35e9b3d37196033ea820fd0faeb1864
    primitive-0.6.4.0-2d41e40312a2e729d7ceb3e089ed3d69
    text-1.2.3.0-5effc91bdd407e9f0f6d3f7e7cc4b828
haddock-interfaces: /home/matheusms/PF/SegundaAvaliacaoFuncional/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/scientific-0.3.6.2/html/scientific.haddock
haddock-html: /home/matheusms/PF/SegundaAvaliacaoFuncional/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/scientific-0.3.6.2/html
